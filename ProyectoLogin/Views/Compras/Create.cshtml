@model ProyectoLogin.Models.ModelosCompras.Compra

@{
    ViewData["Title"] = "Registrar Compra";
    var productos = ViewBag.Productos as IEnumerable<dynamic> ?? new List<dynamic>();
    var unidades = ViewBag.Unidades as IEnumerable<ProyectoLogin.Models.UnidadesDeMedida.UnidadMedida> ?? new List<ProyectoLogin.Models.UnidadesDeMedida.UnidadMedida>();
    var proveedorSeleccionado = ViewBag.ProveedorSeleccionado as int?;
    var proveedores = ViewBag.Proveedores as IEnumerable<dynamic> ?? new List<dynamic>();
}

<div class="container mt-4">
    <h2 class="mb-3">Registrar Compra</h2>

    <!-- FORM para GET al cambiar proveedor (más fiable que window.location.href dentro del form POST) -->
    <form id="formProveedor" method="get" action="/Compras/Create" class="mb-3">
        <div class="card p-3 mb-4 shadow-sm">
            <h5 class="mb-3">Proveedor</h5>
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">Proveedor</label>
                    <select id="proveedorSelect" name="idProveedor" class="form-control" onchange="document.getElementById('formProveedor').submit();">
                        <option value="">--Seleccione proveedor--</option>
                        @foreach (var prov in proveedores)
                        {
                            if (proveedorSeleccionado.HasValue && proveedorSeleccionado.Value == prov.IdProveedor)
                            {
                                <option value="@prov.IdProveedor" selected>@prov.Nombre</option>
                            }
                            else
                            {
                                <option value="@prov.IdProveedor">@prov.Nombre</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Número de documento</label>
                    <!-- Este input NO forma parte del GET de proveedor (se usa en POST), por eso lo dejamos vacío aquí -->
                    <input type="text" id="NumeroDocumentoTemp" class="form-control" placeholder="Factura / Recibo" />
                </div>
            </div>
        </div>
    </form>

    <!-- FORM principal (POST) para guardar compra -->
    <form asp-action="Create" method="post">
        <!-- Hidden: el proveedor seleccionado (se rellena desde server cuando recargas con idProveedor) -->
        <input type="hidden" name="IdProveedor" id="IdProveedorHidden" value="@(proveedorSeleccionado ?? 0)" />

        <div class="card p-3 shadow-sm">
            <h5 class="mb-3">Detalles de la compra</h5>
            <table class="table table-bordered align-middle" id="tablaDetalles">
                <thead class="table-light">
                    <tr>
                        <th>Producto</th>
                        <th>Unidad</th>
                        <th>Cantidad</th>
                        <th>Precio compra (Q)</th>
                        <th>Precio venta (Q)</th>
                        <th>Subtotal (Q)</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="detallesBody"></tbody>
            </table>

            <button type="button" class="btn btn-outline-primary" id="btnAgregar">
                + Agregar producto
            </button>
        </div>

        <!-- Totales -->
        <div class="card p-3 mt-3 shadow-sm">
            <div class="row">
                <div class="col-md-4 ms-auto">
                    <div class="mb-2">
                        <label class="form-label">Subtotal</label>
                        <input type="text" id="subtotal" name="Subtotal" class="form-control text-end" readonly />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">IVA (12%)</label>
                        <input type="text" id="iva" name="IVA" class="form-control text-end" readonly />
                    </div>
                    <div>
                        <label class="form-label">Total</label>
                        <input type="text" id="total" name="Total" class="form-control text-end fw-bold" readonly />
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-4 text-end">
            <a asp-action="Index" class="btn btn-secondary me-2">Cancelar</a>
            <button type="submit" class="btn btn-success">Guardar Compra</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // Serialización segura: si no hay productos, usamos lista vacía
        const productos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(productos));
        const margen = 0.25; // 25% de ganancia

        const tablaBody = document.getElementById("detallesBody");
        const btnAgregar = document.getElementById("btnAgregar");
        const idProveedorHidden = document.getElementById("IdProveedorHidden");

        // Si se cambió el proveedor vía GET, actualizar el hidden actual para el POST
        const proveedorSelect = document.getElementById("proveedorSelect");
        if (proveedorSelect) {
            // Inicializar hidden (por si el usuario no recarga la página)
            if (proveedorSelect.value) idProveedorHidden.value = proveedorSelect.value;

            // Si el usuario cambia el proveedor con el select GET, el form se envía y la página recarga.
            // Pero si en algún flujo quieres sincronizar el hidden sin recargar, podrías hacerlo aquí:
            proveedorSelect.addEventListener("change", function () {
                // sincronizar el hidden (esto ayuda si el usuario no recarga la página manualmente)
                idProveedorHidden.value = this.value || 0;
            });
        }

        // ➕ Agregar fila
        btnAgregar.addEventListener("click", function () {
            // Impedir agregar líneas si no hay proveedor seleccionado
            if (!idProveedorHidden.value || parseInt(idProveedorHidden.value) === 0) {
                alert("Seleccione primero un proveedor para ver sus productos.");
                return;
            }

            const index = tablaBody.querySelectorAll("tr").length;
            const fila = document.createElement("tr");

            fila.innerHTML = `
                <td>
                    <select name="detalles[${index}].IdProducto" class="form-control productoSelect" required>
                        <option value="">--Seleccione--</option>
                        ${productos.map(p => `<option value="${p.IdProducto}">${p.Nombre}</option>`).join('')}
                    </select>
                </td>
                <td>
                    <select name="detalles[${index}].IdUnidad" class="form-control unidadSelect" required>
                        <option value="">--Seleccione--</option>
                    </select>
                </td>
                <td>
                    <input type="number" name="detalles[${index}].Cantidad" class="form-control cantidadInput" min="1" value="1" required />
                </td>
                <td>
                    <input type="number" step="0.01" name="detalles[${index}].PrecioUnitario" class="form-control precioCompraInput" required />
                </td>
                <td>
                    <input type="number" step="0.01" class="form-control precioVentaInput" readonly />
                </td>
                <td>
                    <input type="number" step="0.01" class="form-control subtotalInput" readonly />
                </td>
                <td class="text-center">
                    <button type="button" class="btn btn-danger btn-sm btnQuitar">&times;</button>
                </td>
            `;
            tablaBody.appendChild(fila);
        });

        // Delegación de eventos
        document.addEventListener("change", function (e) {

            // Cargar unidades del producto seleccionado (usamos productos cargados por server para el proveedor actual)
            if (e.target.classList.contains("productoSelect")) {
                const fila = e.target.closest("tr");
                const unidadSelect = fila.querySelector(".unidadSelect");
                const productoId = parseInt(e.target.value);
                const producto = productos.find(p => p.IdProducto === productoId);

                unidadSelect.innerHTML = '<option value="">--Seleccione--</option>';


                        if (producto && producto.Unidades && producto.Unidades.length > 0) {
            producto.Unidades.forEach(u => {
                unidadSelect.innerHTML += `<option value="${u.IdUnidad}">${u.Nombre} (x${u.FactorConversion})</option>`;
            });
        } else {
            // Si no hay unidades asociadas al producto, mostrar todas las del sistema
            const todasUnidades = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Unidades ?? new List<object>()));
            todasUnidades.forEach(u => {
                unidadSelect.innerHTML += `<option value="${u.IdUnidad}">${u.Nombre}</option>`;
            });
        }

            }

            // Recalcular precios al cambiar cantidad o precio
            if (e.target.classList.contains("precioCompraInput") ||
                e.target.classList.contains("cantidadInput")) {

                const fila = e.target.closest("tr");
                const precioCompra = parseFloat(fila.querySelector(".precioCompraInput").value) || 0;
                const cantidad = parseFloat(fila.querySelector(".cantidadInput").value) || 0;

                const precioVentaInput = fila.querySelector(".precioVentaInput");
                const subtotalInput = fila.querySelector(".subtotalInput");

                const precioVenta = precioCompra * (1 + margen);
                const subtotal = precioCompra * cantidad;

                precioVentaInput.value = precioVenta.toFixed(2);
                subtotalInput.value = subtotal.toFixed(2);

                recalcularTotales();
            }

            // Quitar fila
            if (e.target.classList.contains("btnQuitar")) {
                e.target.closest("tr").remove();
                recalcularTotales();
            }
        });

        // Totales generales
        function recalcularTotales() {
            let subtotal = 0;
            tablaBody.querySelectorAll(".subtotalInput").forEach(inp => {
                subtotal += parseFloat(inp.value) || 0;
            });

            const iva = subtotal * 0.12;
            const total = subtotal + iva;

            document.getElementById("subtotal").value = subtotal.toFixed(2);
            document.getElementById("iva").value = iva.toFixed(2);
            document.getElementById("total").value = total.toFixed(2);
        }
    </script>
}