@model ProyectoLogin.Models.ModelosCompras.Compra

@{
    ViewData["Title"] = "Registrar Compra";
    var productos = ViewBag.Productos as IEnumerable<dynamic> ?? new List<dynamic>();
    var unidades = ViewBag.Unidades as IEnumerable<ProyectoLogin.Models.UnidadesDeMedida.UnidadMedida> ?? new List<ProyectoLogin.Models.UnidadesDeMedida.UnidadMedida>();
    var proveedorSeleccionado = ViewBag.ProveedorSeleccionado as int?;
    var proveedores = ViewBag.Proveedores as IEnumerable<dynamic> ?? new List<dynamic>();
}

<div class="container mt-4">
    <h2 class="mb-3">Registrar Compra</h2>

    <!-- FORM para GET al cambiar proveedor -->
    <form id="formProveedor" method="get" action="/Compras/Create" class="mb-3">
        <div class="card p-3 mb-4 shadow-sm">
            <h5 class="mb-3">Proveedor</h5>
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">Proveedor</label>
                    <select id="proveedorSelect" name="idProveedor" class="form-control" onchange="document.getElementById('formProveedor').submit();">
                        <option value="">--Seleccione proveedor--</option>

                        @foreach (var prov in proveedores)
                        {
                            if (proveedorSeleccionado.HasValue && proveedorSeleccionado.Value == prov.IdProveedor)
                            {
                                <option value="@prov.IdProveedor" selected>@prov.Nombre</option>
                            }
                            else
                            {
                                <option value="@prov.IdProveedor">@prov.Nombre</option>
                            }
                        }
                    </select>
                </div>

                
    </form>

    <!-- FORM principal (POST) -->
    <form asp-action="Create" method="post" asp-antiforgery="true"> @Html.AntiForgeryToken()

        <!-- Mostrar mensajes de error/success -->
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger">@TempData["Error"]</div>
        }
        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success">@TempData["Success"]</div>
        }

        <input type="hidden" name="IdProveedor" id="IdProveedorHidden" value="@(proveedorSeleccionado ?? 0)" />

        <!-- Número de documento -->
        <div class="card p-3 mb-3 shadow-sm">
            <div class="row">
                <div class="col-md-6">
                    <label class="form-label">Número de documento</label>
                    <input type="text" name="NumeroDocumento" id="NumeroDocumento" class="form-control" readonly />
                </div>
            </div>
        </div>

        <div class="card p-3 shadow-sm">
            <h5 class="mb-3">Detalles de la compra</h5>
            <table class="table table-bordered align-middle" id="tablaDetalles">
                <thead class="table-light">
                    <tr>
                        <th>Producto</th>
                        <th>Unidad</th>
                        <th>Cantidad</th>
                        <th>Precio compra (Q)</th>
                        <th>Precio venta (Q)</th>
                        <th>Subtotal (Q)</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="detallesBody"></tbody>
            </table>

            <button type="button" class="btn btn-outline-primary" id="btnAgregar">
                + Agregar producto
            </button>
        </div>

        <!-- Totales -->
        <div class="card p-3 mt-3 shadow-sm">
            <div class="row">
                <div class="col-md-4 ms-auto">
                    <div class="mb-2">
                        <label class="form-label">Subtotal</label>
                        <input type="text" id="subtotal" name="Subtotal" class="form-control text-end" readonly />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">IVA (12%)</label>
                        <input type="text" id="iva" name="IVA" class="form-control text-end" readonly />
                    </div>
                    <div>
                        <label class="form-label">Total</label>
                        <input type="text" id="total" name="Total" class="form-control text-end fw-bold" readonly />
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-4 text-end">
            <a asp-action="Index" class="btn btn-secondary me-2">Cancelar</a>
            <button type="submit" class="btn btn-success">Guardar Compra</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // ============================
        // 🔹 GENERAR NÚMERO DE DOCUMENTO
        // ============================
        function generarNumeroDocumento() {
            // Genera número aleatorio de hasta 9 dígitos
            const numero = Math.floor(100000000 + Math.random() * 900000000);
            // Convierte a string con ceros si es necesario
            return numero.toString().padStart(9, '0');
        }

        // Asignar número al campo (solo una vez por carga)
        const numeroDocInput = document.getElementById("NumeroDocumento");
        if (numeroDocInput && !numeroDocInput.value) {
            numeroDocInput.value = generarNumeroDocumento();
        }

        // ============================
        // 🔹 LÓGICA DE COMPRAS
        // ============================
        const productos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(productos));
        const unidadesGlobales = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Unidades ?? new List<object>()));
        const margen = 0.25; // 25% ganancia

        const tablaBody = document.getElementById("detallesBody");
        const btnAgregar = document.getElementById("btnAgregar");
        const idProveedorHidden = document.getElementById("IdProveedorHidden");

        // Sincroniza proveedor con hidden
        const proveedorSelect = document.getElementById("proveedorSelect");
        if (proveedorSelect && proveedorSelect.value)
            idProveedorHidden.value = proveedorSelect.value;

        // ➕ Agregar fila
        btnAgregar.addEventListener("click", function () {
            if (!idProveedorHidden.value || parseInt(idProveedorHidden.value) === 0) {
                alert("Seleccione primero un proveedor para ver sus productos.");
                return;
            }

            const index = tablaBody.querySelectorAll("tr").length;
            const fila = document.createElement("tr");

            fila.innerHTML = `
                <td>
                    <select name="detalles[${index}].IdProducto" class="form-control productoSelect" required>
                        <option value="">--Seleccione--</option>
                        ${productos.map(p => `<option value="${p.IdProducto}">${p.Nombre}</option>`).join('')}
                    </select>
                </td>
                <td>
                    <select name="detalles[${index}].IdUnidad" class="form-control unidadSelect" required>
                        <option value="">--Seleccione--</option>
                    </select>
                </td>
                <td><input type="number" name="detalles[${index}].Cantidad" class="form-control cantidadInput" min="1" value="1" required /></td>
                <td><input type="number" step="0.01" name="detalles[${index}].PrecioUnitario" class="form-control precioCompraInput" required /></td>
                <td><input type="text" class="form-control precioVentaInput text-end" readonly /></td>
                <td><input type="text" class="form-control subtotalInput text-end" readonly /></td>
                <td class="text-center"><button type="button" class="btn btn-danger btn-sm btnQuitar">&times;</button></td>
            `;
            tablaBody.appendChild(fila);
        });

        // Delegación de eventos (productos, unidades, cálculos)
        document.addEventListener("change", function (e) {

            // Cargar unidades segun producto
            if (e.target.classList.contains("productoSelect")) {
                const fila = e.target.closest("tr");
                const unidadSelect = fila.querySelector(".unidadSelect");
                const productoId = parseInt(e.target.value);
                const producto = productos.find(p => p.IdProducto === productoId);

                unidadSelect.innerHTML = '<option value="">--Seleccione--</option>';

                if (producto && producto.Unidades && producto.Unidades.length > 0) {
                    producto.Unidades.forEach(u => {
                        unidadSelect.innerHTML += `<option value="${u.IdUnidad}" data-factor="${u.FactorConversion}">
                            ${u.Nombre} (x${u.FactorConversion})
                        </option>`;
                    });
                } else {
                    unidadesGlobales.forEach(u => {
                        unidadSelect.innerHTML += `<option value="${u.IdUnidad}" data-factor="1">${u.Nombre}</option>`;
                    });
                }
            }

            // Recalcular precios
            if (e.target.classList.contains("precioCompraInput") ||
                e.target.classList.contains("cantidadInput") ||
                e.target.classList.contains("unidadSelect")) {

                const fila = e.target.closest("tr");
                const precioCompraInput = fila.querySelector(".precioCompraInput");
                const cantidadInput = fila.querySelector(".cantidadInput");
                const unidadSelect = fila.querySelector(".unidadSelect");

                const precioVentaInput = fila.querySelector(".precioVentaInput");
                const subtotalInput = fila.querySelector(".subtotalInput");

                const precioBase = parseFloat(precioCompraInput.value.replace(/,/g, '')) || 0;
                const cantidad = parseFloat(cantidadInput.value) || 0;
                const unidadSeleccionada = unidadSelect.options[unidadSelect.selectedIndex];
                const factor = parseFloat(unidadSeleccionada?.dataset.factor || 1);
                const descuentoMayoreo = 0.10;

                let precioCompraAjustado = precioBase;
                if (factor > 1) precioCompraAjustado = (precioBase * factor) * (1 - descuentoMayoreo);

                const precioVenta = precioCompraAjustado * (1 + margen);
                const subtotal = precioCompraAjustado * cantidad;

                // Formato 15,000.00
                precioVentaInput.value = precioVenta.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                subtotalInput.value = subtotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

                recalcularTotales();
            }
        });

        // 🗑️ Eliminar fila
        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("btnQuitar")) {
                e.preventDefault();
                const fila = e.target.closest("tr");
                if (fila) {
                    fila.remove();
                    recalcularTotales();
                }
            }
        });

        // 🧮 Totales con formato 15,000.00
        function recalcularTotales() {
            let subtotal = 0;
            tablaBody.querySelectorAll(".subtotalInput").forEach(inp => {
                subtotal += parseFloat(inp.value.replace(/,/g, '')) || 0;
            });

            const iva = subtotal * 0.12;
            const total = subtotal + iva;

            document.getElementById("subtotal").value = subtotal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById("iva").value = iva.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            document.getElementById("total").value = total.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        }

                // 🧹 Quitar comas antes de enviar el formulario
        document.querySelector('form[asp-action="Create"]').addEventListener('submit', function () {
            document.querySelectorAll('input').forEach(inp => {
                if (inp.value && typeof inp.value === 'string') {
                    inp.value = inp.value.replace(/,/g, '');
                }
            });
        });
    </script>
}
