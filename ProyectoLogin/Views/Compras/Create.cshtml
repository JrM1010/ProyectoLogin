@model ProyectoLogin.Models.ModelosCompras.Compra
@{
    ViewData["Title"] = "Registrar Compra";
    var productos = ViewBag.Productos as IEnumerable<dynamic> ?? new List<dynamic>();
    var unidades = ViewBag.Unidades as IEnumerable<dynamic> ?? new List<dynamic>();
    var proveedores = ViewBag.Proveedores as IEnumerable<dynamic> ?? new List<dynamic>();
    var proveedorSeleccionado = ViewBag.ProveedorSeleccionado as int?;
}

<div class="container mt-4">
    <h2 class="mb-4">Registrar Compra</h2>

    <!-- 🔹 Selección de proveedor -->
    <form id="formProveedor" method="get" action="/Compras/Create">
        <div class="card p-3 shadow-sm mb-4">
            <label for="proveedorSelect" class="form-label fw-bold">Proveedor</label>
            <select id="proveedorSelect" name="idProveedor" class="form-select" onchange="this.form.submit()">
                <option value="">-- Seleccione proveedor --</option>
                @foreach (var p in proveedores)
                {
                    <option value="@p.IdProveedor" selected="@(proveedorSeleccionado == p.IdProveedor ? "selected" : null)">
                        @p.Nombre
                    </option>
                }
            </select>
        </div>
    </form>

    <!-- 🔹 Formulario principal -->
    <form asp-action="Create" method="post" onsubmit="return bloquearBotonGuardar(this)">
        @Html.AntiForgeryToken()
        <input type="hidden" name="IdProveedor" id="IdProveedorHidden" value="@(proveedorSeleccionado ?? 0)" />

        <!-- 🔹 Mostrar código de compra -->
        @if (ViewBag.NumeroDocumento != null)
        {
            <div class="card p-3 shadow-sm mb-4">
                <label class="form-label fw-bold">Código de compra</label>
                <input type="text" name="NumeroDocumento" value="@ViewBag.NumeroDocumento" class="form-control" readonly />
            </div>
        }

        <!-- 🔸 Tabla de detalles -->
        <div class="card p-3 shadow-sm">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="mb-0">Detalles de la compra</h5>
                <button type="button" id="btnAgregar" class="btn btn-outline-primary btn-sm">
                    + Agregar producto
                </button>
            </div>

            <table class="table table-bordered align-middle" id="tablaDetalles">
                <thead class="table-light">
                    <tr>
                        <th>Producto</th>
                        <th>Unidad</th>
                        <th>Cantidad</th>
                        <th>Precio compra (Q)</th>
                        <th>Precio venta (Q)</th> <!-- ✅ -->
                        <th>Descuento (%)</th>
                        <th>Subtotal (Q)</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="detallesBody"></tbody>
            </table>

            <!-- Template oculto -->
            <template id="filaTemplate">
                <tr>
                    <td>
                        <select class="form-select productoSelect" required>
                            <option value="">--Seleccione--</option>
                        </select>
                    </td>
                    <td>
                        <select class="form-select unidadSelect" required>
                            <option value="">--Seleccione--</option>
                        </select>
                    </td>
                    <td><input type="number" class="form-control cantidadInput" min="1" value="1" required /></td>
                    <td><input type="number" step="0.01" class="form-control precioInput" required /></td>
                    <td><input type="text" class="form-control precioVentaInput text-end" readonly /></td>
                    <td><input type="text" class="form-control descuentoInput text-end" readonly value="0" /></td>
                    <td><input type="text" class="form-control subtotalInput text-end" readonly /></td>
                    <td class="text-center">
                        <button type="button" class="btn btn-danger btn-sm btnQuitar">&times;</button>
                    </td>
                </tr>
            </template>
        </div>

        <!-- 🔸 Totales -->
        <div class="card p-3 mt-3 shadow-sm">
            <div class="row justify-content-end">
                <div class="col-md-4">
                    <div class="mb-2">
                        <label for="subtotal" class="form-label">Subtotal</label>
                        <input type="text" id="subtotal" name="Subtotal" class="form-control text-end" readonly />
                    </div>
                    <div class="mb-2">
                        <label for="iva" class="form-label">IVA (12%)</label>
                        <input type="text" id="iva" name="IVA" class="form-control text-end" readonly />
                    </div>
                    <div>
                        <label for="total" class="form-label fw-bold">Total</label>
                        <input type="text" id="total" name="Total" class="form-control text-end fw-bold" readonly />
                    </div>
                </div>
            </div>
        </div>

        <!-- 🔸 Botones -->
        <div class="mt-4 text-end">
            <a asp-action="Index" class="btn btn-secondary me-2">Cancelar</a>
            <button type="submit" class="btn btn-success">Guardar Compra</button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        (() => {
            const productos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(productos));
            const unidadesGlobales = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(unidades));
            const tablaBody = document.getElementById("detallesBody");
            const btnAgregar = document.getElementById("btnAgregar");
            const filaTemplate = document.getElementById("filaTemplate");

            // 🔹 Agregar fila
            btnAgregar.addEventListener("click", () => {
                const clone = filaTemplate.content.cloneNode(true);
                const index = tablaBody.querySelectorAll("tr").length;
                const productoSelect = clone.querySelector(".productoSelect");

                productos.forEach(p => {
                    const opt = document.createElement("option");
                    opt.value = p.IdProducto;
                    opt.textContent = p.Nombre;
                    productoSelect.appendChild(opt);
                });

                // Asignar nombres únicos
                clone.querySelectorAll("input, select").forEach(el => {
                    if (el.classList.contains("productoSelect")) el.name = `detalles[${index}].IdProducto`;
                    if (el.classList.contains("unidadSelect")) el.name = `detalles[${index}].IdUnidad`;
                    if (el.classList.contains("cantidadInput")) el.name = `detalles[${index}].Cantidad`;
                    if (el.classList.contains("precioInput")) el.name = `detalles[${index}].PrecioUnitario`;
                    if (el.classList.contains("precioVentaInput")) el.name = `detalles[${index}].PrecioVenta`;
                    if (el.classList.contains("descuentoInput")) el.name = `detalles[${index}].Descuento`;
                });

                tablaBody.appendChild(clone);
            });

            // 🔹 Cargar unidades según producto
            tablaBody.addEventListener("change", e => {
                if (!e.target.classList.contains("productoSelect")) return;

                const productoId = parseInt(e.target.value);
                const producto = productos.find(p => p.IdProducto === productoId);
                const unidadSelect = e.target.closest("tr").querySelector(".unidadSelect");
                unidadSelect.innerHTML = '<option value="">--Seleccione--</option>';

                const unidades = producto?.Unidades?.length ? producto.Unidades : unidadesGlobales;
                unidades.forEach(u => {
                    const opt = document.createElement("option");
                    opt.value = u.IdUnidad;
                    opt.textContent = `${u.Nombre}${u.FactorConversion ? ` (x${u.FactorConversion})` : ""}`;
                    opt.dataset.factor = u.FactorConversion || 1;
                    unidadSelect.appendChild(opt);
                });
            });

            // 🔹 Calcular totales + precio venta
            tablaBody.addEventListener("input", e => {
                if (["precioInput", "cantidadInput", "unidadSelect"].some(c => e.target.classList.contains(c))) {
                    recalcularTotales();
                }
            });

            // 🔹 Quitar fila
            tablaBody.addEventListener("click", e => {
                if (!e.target.classList.contains("btnQuitar")) return;
                e.target.closest("tr").remove();
                reindexar();
                recalcularTotales();
            });

            // 🔹 Reindexar
            function reindexar() {
                tablaBody.querySelectorAll("tr").forEach((fila, i) => {
                    fila.querySelectorAll("input, select").forEach(el => {
                        el.name = el.name.replace(/detalles\[\d+\]/, `detalles[${i}]`);
                    });
                });
            }

            // 🔹 Calcular totales
                    function recalcularTotales() {
            const margen = 0.25; // 🔹 Margen de ganancia 25 %
            let subtotal = 0;

            tablaBody.querySelectorAll("tr").forEach(fila => {
                const precio = parseFloat(fila.querySelector(".precioInput")?.value) || 0;
                const cantidad = parseFloat(fila.querySelector(".cantidadInput")?.value) || 0;
                const unidad = fila.querySelector(".unidadSelect")?.selectedOptions[0]?.textContent.toLowerCase() || "";

                // 🔹 Aplicar descuento si la unidad contiene "caja"
                let descuento = 0;
                if (unidad.includes("caja")) descuento = 10; // 10% de descuento

                // 🔹 Calcular precios
                const precioConDescuento = precio * (1 - descuento / 100);
                const precioVenta = precioConDescuento * (1 + margen);
                const subtotalFila = precioConDescuento * cantidad;

                // 🔹 Mostrar valores en la fila
                fila.querySelector(".descuentoInput").value = descuento.toFixed(0);
                fila.querySelector(".precioVentaInput").value = precioVenta.toFixed(2);
                fila.querySelector(".subtotalInput").value = subtotalFila.toFixed(2);

                subtotal += subtotalFila;
            });

            // 🔹 Totales generales
            const iva = subtotal * 0.12;
            const total = subtotal + iva;

            document.getElementById("subtotal").value = subtotal.toFixed(2);
            document.getElementById("iva").value = iva.toFixed(2);
            document.getElementById("total").value = total.toFixed(2);
        }

            // 🔹 Validar antes de enviar
            document.querySelector("form[asp-action='Create']").addEventListener("submit", e => {
                tablaBody.querySelectorAll("tr").forEach(fila => {
                    const idProd = fila.querySelector(".productoSelect")?.value;
                    const cantidad = parseFloat(fila.querySelector(".cantidadInput")?.value) || 0;
                    const precio = parseFloat(fila.querySelector(".precioInput")?.value) || 0;
                    if (!idProd || cantidad <= 0 || precio <= 0) {
                        fila.remove();
                    }
                });
                reindexar();

                if (tablaBody.children.length === 0) {
                    e.preventDefault();
                    alert("Debe agregar al menos un producto válido antes de guardar la compra.");
                    return;
                }
            });

            // 🔹 Evitar doble envío
            window.bloquearBotonGuardar = function(form) {
                const boton = form.querySelector("button[type='submit']");
                if (boton) {
                    boton.disabled = true;
                    boton.innerText = "Guardando...";
                }
                return true;
            };
        })();
    </script>
}
